document.addEventListener("DOMContentLoaded", function () {

    // Obtient une r√©f√©rence √† l'√©l√©ment qui contiendra les questions dans le HTML
    const questionContainer = document.getElementById("question-container");

    // Obtient une r√©f√©rence √† l'√©l√©ment de la barre de recherche
    const searchBar = document.getElementById("search-bar");

    // D√©finit les questions
    const questions = [
        "Quelle est la capitale de la France?",
        "En quelle ann√©e les √âtats-Unis ont-ils d√©clar√© leur ind√©pendance?",
        "Quel est le composant principal de l'atmosph√®re terrestre?",
        "Qui a √©crit 'Rom√©o et Juliette'?",
        "Quelle est la signification de la th√©orie de la relativit√© d'Albert Einstein?",
        "Quelle est la capitale de l'Italie?",
        "Combien font 1 + 1?"
    ];

    // D√©finir les r√©ponses
    const responses = [
        "‚úÖ Paris",
        "‚úÖ 1776",
        "‚úÖ Azote",
        "‚úÖ William Shakespeare",
        "‚úÖ Elle d√©crit la relation entre la mati√®re et l'√©nergie.",
        "‚úÖ Rome",
        "‚úÖ 2"
    ];

    // D√©finir les √©tiquettes
    const etiquettes = [
        "ü•â",
        "ü•à",
        "ü•á",
        "ü•à",
        "ü•á",
        "ü•â",
        "ü•â"
    ];

    // Associer les questions, r√©ponses et √©tiquettes dans un tableau d'objets
    const combinedQuestions = questions.map((q, i) => ({ question: q, response: responses[i], etiquette: etiquettes[i] }));

    // M√©langer al√©atoirement les questions
    const shuffledQuestions = shuffleArray(combinedQuestions);

    // Parcourir les 5 premi√®res questions m√©lang√©es
    shuffledQuestions.slice(0, 5).forEach(q => {
        // Cr√©e un √©l√©ment HTML pour chaque question
        const questionElement = createElement("div", "question", [
            createElement("span", "etiquette", q.etiquette),
            createElement("div", "question-text", q.question),
            createElement("div", "response", "")
        ]);

        // Ajouter l'√©l√©ment de la question √† l'√©l√©ment contenant toutes les questions
        questionContainer.appendChild(questionElement);

        // Ajouter un gestionnaire d'√©v√©nements pour le clic sur l'√©tiquette
        questionElement.querySelector('.etiquette').addEventListener('click', () => toggleResponse(questionElement.querySelector('.response'), q.response));
    });

    // Ajouter un gestionnaire d'√©v√©nements pour la recherche
    searchBar.addEventListener("input", () => {
        if (searchBar.value === "") {
            resetQuestions();
        } else {
            updateQuestions(combinedQuestions.filter(q => q.question.toLowerCase().includes(searchBar.value.toLowerCase())));
        }
    });

    /*******  Partie fonctions *******/

    // Fonction pour mettre √† jour l'affichage des questions
    function updateQuestions(filteredQuestions) {
        // Efface les questions actuelles
        questionContainer.innerHTML = "";
        // Affiche les questions filtr√©es
        filteredQuestions.forEach(q => {
            const questionElement = createElement("div", "question", [
                createElement("span", "etiquette", q.etiquette),
                createElement("div", "question-text", q.question),
                createElement("div", "response", "")
            ]);

            questionContainer.appendChild(questionElement);

            // Ajoute un gestionnaire d'√©v√©nements pour le clic sur l'√©tiquette
            questionElement.querySelector('.etiquette').addEventListener('click', () => toggleResponse(questionElement.querySelector('.response'), q.response));
        });
    }

    // Fonction pour r√©initialiser les questions affich√©es aux cinq premi√®res
    function resetQuestions() {
        updateQuestions(shuffledQuestions.slice(0, 5));
    }

    // Fonction pour afficher ou masquer la r√©ponse
    function toggleResponse(responseElement, response) {
        // Si la r√©ponse est masqu√©e ou vide, affiche la r√©ponse
        if (responseElement.style.display === 'none' || responseElement.style.display === '') {
            responseElement.style.display = 'block';
            responseElement.textContent = response;
        }
        // Sinon, masque la r√©ponse
        else {
            responseElement.style.display = 'none';
            responseElement.textContent = '';
        }
    }

    // Fonction pour m√©langer al√©atoirement un tableau array
    function shuffleArray(array) {
        for (let i = 0; i < array.length - 1; i++) {
            const j = Math.floor(Math.random() * (array.length - i) + i);
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // Fonction pour cr√©er un √©l√©ment HTML avec une classe et des fils
    function createElement(tag, className, children) {
        const element = document.createElement(tag);
        element.classList.add(className);

        if (Array.isArray(children)) {
            children.forEach(child => element.appendChild(child));
        } else {
            element.textContent = children;
        }

        return element;
    }
});
